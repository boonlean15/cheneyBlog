(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{344:function(t,a,s){"use strict";s.r(a);var n=s(27),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面向对象的思想写好并发程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的思想写好并发程序"}},[t._v("#")]),t._v(" 面向对象的思想写好并发程序")]),t._v(" "),a("img",{attrs:{width:"800",src:"https://boonlean15.github.io/cheneyBlog/images/javaconcurrent/how-to-code/1.png",alt:"png"}}),t._v("\n面向对象思想和并发编程并无直接联系，但在java语言里，面向对象思想和并发编程被融合到了一起。在java语言中，面向对象思想能让并发编程变得更加简单\n"),a("h2",{attrs:{id:"封装共享变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#封装共享变量"}},[t._v("#")]),t._v(" 封装共享变量")]),t._v(" "),a("p",[t._v("并发程序的一个核心问题，解决多线程访问共享变量的并发问题。类比球场检票，座位即共享变量、入口即公共访问方法、检票即并发访问策略、")]),t._v(" "),a("ul",[a("li",[t._v("利用面向对象的思想写并发程序")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("将共享变量作为对象属性封装在内部，对外提供公共访问方法，所有的公共访问方法制定并发访问策略")])])]),t._v(" "),a("ul",[a("li",[t._v("现实中，共享变量有很多个，而对于不会变化的共享变量，建议使用final关键字修饰。既避免并发访问问题，也表明了设计意图")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Counter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addOne")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"识别共享变量间的约束条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#识别共享变量间的约束条件"}},[t._v("#")]),t._v(" 识别共享变量间的约束条件")]),t._v(" "),a("p",[t._v("当代码里出现if语句时，要注意是否存在竞态条件。")]),t._v(" "),a("blockquote",[a("p",[t._v("库存上限和下限的共享变量例子。根据例子可以得出，如果没有充分识别共享变量之间的条件，制定出来的并发访问策略可能南辕北辙")])]),t._v(" "),a("h2",{attrs:{id:"制定并发访问策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#制定并发访问策略"}},[t._v("#")]),t._v(" 制定并发访问策略")]),t._v(" "),a("h3",{attrs:{id:"三个方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三个方案"}},[t._v("#")]),t._v(" 三个方案")]),t._v(" "),a("ul",[a("li",[t._v("避免共享：线程本地存储方案，以及为每个任务分配独立的线程")]),t._v(" "),a("li",[t._v("不变模式：java使用的少，其他使用的多，如Actor，CSP，函数式编程的基础都是不变模式")]),t._v(" "),a("li",[t._v("管程及其他同步工具类：java领域的万能钥匙是管程，对于很多特定场景，使用java sdk并发包下的读写锁，并发容器等同步工具更好")])]),t._v(" "),a("h3",{attrs:{id:"三个原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三个原则"}},[t._v("#")]),t._v(" 三个原则")]),t._v(" "),a("ul",[a("li",[t._v("优先使用成熟的工具类：sdk并发包提供了丰富的工具类，基本能满足日常使用。并发工具类不是随便就能发明的")]),t._v(" "),a("li",[t._v("迫不得已才使用低级的并发原语：synchronized、lock、semaphore，虽然感觉简单，实际并不简单")]),t._v(" "),a("li",[t._v("避免过早优化：安全第一，先保证线程安全，当出现性能问题时，再进行优化。避免杞人忧天，事倍功半")])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("而对共享变量进行封装，要避免“逸出”，所谓“逸出”简单讲就是共享变量逃逸到对象的外面")])])}),[],!1,null,null,null);a.default=r.exports}}]);