(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{428:function(e,r,v){"use strict";v.r(r);var a=v(27),t=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"spring-cloud-eureka"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-eureka"}},[e._v("#")]),e._v(" Spring cloud eureka")]),e._v(" "),r("p",[e._v("基于REST的服务发现组件")]),e._v(" "),r("h2",{attrs:{id:"服务发现概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务发现概述"}},[e._v("#")]),e._v(" 服务发现概述")]),e._v(" "),r("p",[e._v("1.服务发现由来")]),e._v(" "),r("blockquote",[r("p",[e._v("跟软件开发的架构方式的演进有着密切关系")])]),e._v(" "),r("ul",[r("li",[e._v("单体架构，调用其他服务的时候，通过api方式调用")]),e._v(" "),r("li",[e._v("soa 服务拆分，服务之间互相调用，服务提供者和服务消费者通过配置多个服务实例的访问地址实现调用")]),e._v(" "),r("li",[e._v("微服务 docker容器化，服务不再固定部署在服务器上，ip变化频繁，此时服务注册中心的出现则变得迫切、其他的服务组件例如网关等都通过访问服务注册中心来获取服务实例列表，实现动态路由")])]),e._v(" "),r("p",[e._v("2.服务发现技术选型")]),e._v(" "),r("blockquote",[r("p",[e._v("根据CAP选型，是AP还是CP，采用的语言是什么，比如eureka和nacos采用的是java语言，eureka是AP，zookeeper是CP")])]),e._v(" "),r("h2",{attrs:{id:"eureka的核心类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka的核心类"}},[e._v("#")]),e._v(" eureka的核心类")]),e._v(" "),r("ul",[r("li",[e._v("InstanceInfo 代表注册的服务实例")]),e._v(" "),r("li",[e._v("LeaseInfo 服务实例的租约信息")]),e._v(" "),r("li",[e._v("ServiceInstance 服务发现的实例信息的抽象接口，约定服务实例有哪些通用的信息")]),e._v(" "),r("li",[e._v("InstanceStatus 服务实例的状态")])]),e._v(" "),r("h2",{attrs:{id:"服务的核心操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务的核心操作"}},[e._v("#")]),e._v(" 服务的核心操作")]),e._v(" "),r("ul",[r("li",[e._v("服务注册 register")]),e._v(" "),r("li",[e._v("服务下线 cancel")]),e._v(" "),r("li",[e._v("服务租约 renew")]),e._v(" "),r("li",[e._v("服务剔除 evict")])]),e._v(" "),r("blockquote",[r("p",[e._v("LeaseManager和LookupService是eureka关于服务发现相关操作定义的接口类")])]),e._v(" "),r("ul",[r("li",[e._v("LeaseManager")])]),e._v(" "),r("blockquote",[r("p",[e._v("定义了服务实例的regist、cancel、renew、evict操作方法")])]),e._v(" "),r("ul",[r("li",[e._v("LookupService")])]),e._v(" "),r("blockquote",[r("p",[e._v("定义了eureka client从服务中心获取服务实例的查询方法")])]),e._v(" "),r("h2",{attrs:{id:"eureka的设计理念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka的设计理念"}},[e._v("#")]),e._v(" eureka的设计理念")]),e._v(" "),r("ul",[r("li",[e._v("服务实例如何注册到服务中心\n"),r("blockquote",[r("p",[e._v("服务启动的时候调用REST api的register方法注册服务实例信息")])])]),e._v(" "),r("li",[e._v("服务实例如何从服务中心剔除\n"),r("blockquote",[r("p",[e._v("正常情况，服务实例关闭的时候，调用钩子方法或其他生命周期回调方法，删除自身服务实例信息。服务实例挂掉或异常情况，通过租约续租的方式，通过心跳证明服务实例存活，如租约逾期，服务中心删除服务实例信息。")])])]),e._v(" "),r("li",[e._v("服务实例一致性问题\n"),r("blockquote",[r("p",[e._v("服务实例本身应该是个集群，服务实例注册信息如何在集群中保持一致。主要由下面：AP优于CP、peer to peer 架构、zone及region设计、self preservation设计")])])])]),e._v(" "),r("h2",{attrs:{id:"ap优于cp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ap优于cp"}},[e._v("#")]),e._v(" AP优于CP")]),e._v(" "),r("ul",[r("li",[e._v("CAP理论\n"),r("ul",[r("li",[r("p",[e._v("Consistency 数据一致性 对数据更新操作成功之后，要求副本之间数据保持一致性")])]),e._v(" "),r("li",[r("p",[e._v("Availability 可用性 客户端对集群进行读写操作，请求能够正常响应")])]),e._v(" "),r("li",[r("p",[e._v("Partition Tolerance 分区容错性 通信故障时，集群被分割为多个分区，集群仍然可用")]),e._v(" "),r("blockquote",[r("p",[e._v("分布式系统，网络条件不可控，网络分区不可避免，系统必须具备分区容错性")]),e._v(" "),r("blockquote",[r("p",[e._v("zookeeper采用“CP”，默认非强一致性，实例同步过半数时，则返回。如采用强一致性，则需要访问到服务实例时，sync操作同步信息。但无法保证availability")])])]),e._v(" "),r("blockquote",[r("blockquote",[r("p",[e._v("Eureka网络分区不可用不可避免，选择拥抱服务实例不可用的问题，实现AP。服务注册中心保留可用及过期数据，比丢失数据来的好。")])])])])])])]),e._v(" "),r("h2",{attrs:{id:"peer-to-peer-架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#peer-to-peer-架构"}},[e._v("#")]),e._v(" peer to peer 架构")]),e._v(" "),r("ul",[r("li",[e._v("主从复制 master-slave模式，主节点负责写操作，从节点从主节点复制更新数据。主节点的写操作压力是系统的瓶颈，但从节点可分担读操作")]),e._v(" "),r("li",[e._v("peer to peer 对等复制，任何副本都可以接受写操作，每个副本之间进行数据更新。数据同步和数据冲突处理是一个棘手的问题\n"),r("blockquote",[r("p",[e._v("eureka采用peer to peer")])]),e._v(" "),r("ul",[r("li",[e._v("客户端\n"),r("ul",[r("li",[e._v("优先选择相同分区的server，没有则采用defaultZone")]),e._v(" "),r("li",[e._v("可用和不可用server列表，可用server列表每隔一段时间刷新，避免访问顺序造成的server压力")])])]),e._v(" "),r("li",[e._v("服务端\n"),r("ul",[r("li",[e._v("server本身也是client，启动时，register并syncUp操作同步数据")]),e._v(" "),r("li",[e._v("header_replication标识时复制操作，避免server之间复制死循环")]),e._v(" "),r("li",[e._v("lastDirtyTime 对比，如果大于，server数据之间冲突，要求重新register、如果小于，如果是peer节点的复制，则要求其同步自己的最新数据")]),e._v(" "),r("li",[e._v("heartbeat心跳，服务实例的renewLease操作，如发现数据不一致，要求重新register")])])])])])]),e._v(" "),r("h2",{attrs:{id:"zone和region"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#zone和region"}},[e._v("#")]),e._v(" zone和region")]),e._v(" "),r("ul",[r("li",[e._v("eureka基于amazon开发，region代表区域。region下有多个availabilityZone，每个zone下可以有多个server服务实例")]),e._v(" "),r("li",[e._v("region之间不会进行复制，zone下的server服务实例是peer节点，构成复制")]),e._v(" "),r("li",[e._v("ribbon支持zoneAffinity，客户端路由或网关路由时，优先选择与自身实例在同一个zone的服务实例")])]),e._v(" "),r("h2",{attrs:{id:"self-preservation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#self-preservation"}},[e._v("#")]),e._v(" self preservation")]),e._v(" "),r("ul",[r("li",[e._v("心跳保持租约，server通过实例数计算每分钟应该收到的心跳数")]),e._v(" "),r("li",[e._v("最近一分钟的心跳数如果小于或等于指定阈值，则关闭租约失效剔除，以保护注册信息")])])])}),[],!1,null,null,null);r.default=t.exports}}]);