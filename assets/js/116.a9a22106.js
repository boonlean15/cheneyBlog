(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{426:function(s,a,t){"use strict";t.r(a);var r=t(27),v=Object(r.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"微服务与springcloud"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务与springcloud"}},[s._v("#")]),s._v(" 微服务与springcloud")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("微服务是一种架构风格，能给软件应用开发带来很大的便利，但是微服务的实施和落地面临着很大的挑战，因此需要一套完整的微服务解决方案。\n")])])]),a("h2",{attrs:{id:"微服务架构概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构概述"}},[s._v("#")]),s._v(" 微服务架构概述")]),s._v(" "),a("h2",{attrs:{id:"应用架构的发展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用架构的发展"}},[s._v("#")]),s._v(" 应用架构的发展")]),s._v(" "),a("p",[s._v("1.单体应用")]),s._v(" "),a("blockquote",[a("p",[s._v("缺点：灵活度不足、降低系统的性能、系统启动慢、系统拓展性差")])]),s._v(" "),a("p",[s._v("2.分布式架构")]),s._v(" "),a("blockquote",[a("p",[s._v("按照业务垂直切分，每个应用都是单体架构")])]),s._v(" "),a("p",[s._v("3.面向服务的SOA架构")]),s._v(" "),a("blockquote",[a("p",[s._v("不同的业务建立不同的服务，服务之间互相调用。Dubbo是soa的典型实现：主要角色包含服务提供者和服务消费者")])]),s._v(" "),a("p",[s._v("4.微服务架构")]),s._v(" "),a("blockquote",[a("p",[s._v("soa架构继续发展的下一步，是一种架构风格。一个大型的业务系统，它的业务功能可以拆分成多个独立的微服务，各个服务之间是松耦合，通过各种远程协议进行同步/异步通信。各个微服务可以独立部署，扩容，升降级等。")])]),s._v(" "),a("p",[s._v("5.服务网格")]),s._v(" "),a("p",[s._v("6.无服务架构")]),s._v(" "),a("h2",{attrs:{id:"微服务解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务解决方案"}},[s._v("#")]),s._v(" 微服务解决方案")]),s._v(" "),a("p",[s._v("1.基于springcloud的微服务解决方案")]),s._v(" "),a("blockquote",[a("p",[s._v("技术选型中立，可随需搭配更换使用")])]),s._v(" "),a("p",[s._v("2.基于Dubbo实现微服务解决方案")]),s._v(" "),a("blockquote",[a("p",[s._v("Dubbo+nacos+seta+其他")])]),s._v(" "),a("h2",{attrs:{id:"springcloud与中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud与中间件"}},[s._v("#")]),s._v(" springcloud与中间件")]),s._v(" "),a("p",[s._v("注册中心，配置中心，网关，负载均衡，熔断机制，链路监控等中间件。")]),s._v(" "),a("h2",{attrs:{id:"中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[s._v("#")]),s._v(" 中间件")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("操作系统之上，应用软件之下的中间层软件。\n")])])]),a("blockquote",[a("p",[s._v("中间件向下屏蔽异构的硬件、软件、网络等计算资源，向上提供应用开发、运行、维护等全生命周期的统一的计算环境和管理，属于承上启下的中间层。")])]),s._v(" "),a("h2",{attrs:{id:"springcloud"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud"}},[s._v("#")]),s._v(" springcloud")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("也是一个中间件，基于springboot开发，提供一套完整的微服务解决方案。\n")])])]),a("p",[s._v("1.网关")]),s._v(" "),a("blockquote",[a("p",[s._v("统一接入服务、协议适配、流量管控、安全防护\nzuul对每个请求分配一个线程处理，根据参考数据，最多达到1000-2000qps，并发情况下，不建议使用，因此出现第二代网关gateway")])]),s._v(" "),a("h2",{attrs:{id:"springcloud增强生态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud增强生态"}},[s._v("#")]),s._v(" springcloud增强生态")]),s._v(" "),a("p",[s._v("1.springcloud分布式事务")]),s._v(" "),a("blockquote",[a("p",[s._v("分布式事务问题成为微服务落地最大的阻碍和最具挑战性的问题")])]),s._v(" "),a("p",[s._v("2.springcloud与领域驱动")])])}),[],!1,null,null,null);a.default=v.exports}}]);