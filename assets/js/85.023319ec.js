(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{396:function(e,s,t){"use strict";t.r(s);var a=t(27),r=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"linux常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux常用命令"}},[e._v("#")]),e._v(" Linux常用命令")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.linuxprobe.com/linux-securecrt-sftp.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("linux博文"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"docker清理常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker清理常用命令"}},[e._v("#")]),e._v(" docker清理常用命令")]),e._v(" "),s("h3",{attrs:{id:"docker-命令清除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-命令清除"}},[e._v("#")]),e._v(" docker 命令清除")]),e._v(" "),s("ul",[s("li",[e._v("docker system df\n"),s("blockquote",[s("p",[e._v("可用于查询镜像（Images）、容器（Containers）和本地卷（Local Volumes）等空间使用大户的空间占用情况。")])])]),e._v(" "),s("li",[e._v("docker system df -v 查看详细信息")]),e._v(" "),s("li",[e._v("docker system prune --help\n"),s("blockquote",[s("p",[e._v("该指令默认会清除所有如下资源：已停止的容器（container）、未被任何容器所使用的卷（volume)、未被任何容器所关联的网络（network）、所有悬空镜像（image）。该指令默认只会清除悬空镜像，未被使用的镜像不会被删除。添加-a 或 --all参数后，可以一并清除所有未使用的镜像和悬空镜像。可以添加-f 或 --force参数用以忽略相关告警确认信息。")])])]),e._v(" "),s("li",[e._v("docker image prune：删除悬空的镜像")]),e._v(" "),s("li",[e._v("docker container prune：删除无用的容器\n"),s("blockquote",[s("p",[e._v('以使用--filter标志来筛选出不希望被清理掉的容器。例子：清除掉所有停掉的容器，但24内创建的除外：docker container prune --filter "until=24h"')])])]),e._v(" "),s("li",[e._v("docker volume prune：删除无用的卷")]),e._v(" "),s("li",[e._v("docker network prune：删除无用的网络")])]),e._v(" "),s("h3",{attrs:{id:"手动清除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手动清除"}},[e._v("#")]),e._v(" 手动清除")]),e._v(" "),s("ul",[s("li",[e._v("删除所有悬空镜像，不删除未使用镜像\n"),s("blockquote",[s("p",[e._v('docker rmi $(docker images -f "dangling=true" -q)')])])]),e._v(" "),s("li",[e._v("删除所有未使用镜像和悬空镜像\n"),s("blockquote",[s("p",[e._v("docker rmi $(docker images -q)")])])]),e._v(" "),s("li",[e._v("删除所有未被容器引用的卷\n"),s("blockquote",[s("p",[e._v("docker volume rm $(docker volume ls -qf dangling=true)")])])]),e._v(" "),s("li",[e._v("删除所有已退出的容器\n"),s("blockquote",[s("p",[e._v("docker rm -v $(docker ps -aq -f status=exited)")])])]),e._v(" "),s("li",[e._v("删除所有状态为dead的容器\n"),s("blockquote",[s("p",[e._v("docker rm -v $(docker ps -aq -f status=dead)")])])])]),e._v(" "),s("h3",{attrs:{id:"对标准输入日志大小与数量进行限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对标准输入日志大小与数量进行限制"}},[e._v("#")]),e._v(" 对标准输入日志大小与数量进行限制")]),e._v(" "),s("ul",[s("li",[e._v("新建或修改/etc/docker/daemon.json，添加log-dirver和log-opts参数,vi /etc/docker/daemon.json")])]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"log-driver"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"json-file"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"log-opts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"max-size"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"3m"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"max-file"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("ul",[s("li",[e._v("重启docker的守护线程")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("systemctl daemon-reload\nsystemctl restart "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\n")])])]),s("h3",{attrs:{id:"重新加载-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重新加载-docker"}},[e._v("#")]),e._v(" 重新加载 docker")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("systemctl daemon-reload\nsystemctl restart "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\nsystemctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\n")])])]),s("h3",{attrs:{id:"docker日志清理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker日志清理"}},[e._v("#")]),e._v(" docker日志清理")]),e._v(" "),s("ul",[s("li",[e._v("overlay2的同级目录下会有如下的目录，用大量空间的日志文件位于containers下")]),e._v(" "),s("li",[e._v("在目录中会存在以目录名为前缀，以“-json.log”为后缀的目录文件")]),e._v(" "),s("li",[e._v("可使用如下命令对该文件的内容进行清理")]),e._v(" "),s("li",[s("blockquote",[s("p",[e._v("cat /dev/null -> *-json.log , 在此执行df -h命令之后，你会发现overlay2所占的磁盘空间已经减小。")])])])]),e._v(" "),s("h2",{attrs:{id:"查看磁盘使用情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看磁盘使用情况"}},[e._v("#")]),e._v(" 查看磁盘使用情况")]),e._v(" "),s("ul",[s("li",[e._v("df -h 总览查看磁盘使用情况")]),e._v(" "),s("li",[e._v("深挖每一层文件夹路径的情况\n"),s("blockquote",[s("p",[e._v("du -h --max-depth=1")])])]),e._v(" "),s("li",[e._v("ls -lh 以我们熟悉的计算方式查看文件大小")]),e._v(" "),s("li",[e._v("查询文件夹中文件数量的方法\n"),s("ul",[s("li",[s("blockquote",[s("p",[e._v("find /path/to/folder -type f | wc -l  将/path/to/folder替换为你要查询的文件夹路径")])])]),e._v(" "),s("li",[s("blockquote",[s("p",[e._v('ls -l | grep "^-" | wc -l 使用grep命令过滤出以-开头的行（表示文件），然后使用wc -l命令统计行数，即文件数量。')])])]),e._v(" "),s("li",[s("blockquote",[s("p",[e._v("ls -p | grep -v / | wc -l 使用grep -v /命令过滤掉以/结尾的行（表示子文件夹），然后使用wc -l命令统计行数，即文件数量。")])])])])])]),e._v(" "),s("h3",{attrs:{id:"查找系统中的大文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找系统中的大文件"}},[e._v("#")]),e._v(" 查找系统中的大文件")]),e._v(" "),s("ul",[s("li",[e._v("查找指定目录下所有大于100M的所有文件")])]),e._v(" "),s("blockquote",[s("p",[e._v("find /var/lib/docker/overlay2/ -type f -size +100M -print0 | xargs -0 du -h | sort -nr")])]),e._v(" "),s("h2",{attrs:{id:"迁移-var-lib-docker-目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迁移-var-lib-docker-目录"}},[e._v("#")]),e._v(" 迁移 /var/lib/docker 目录")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("systemctl stop "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" /home/docker/lib\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rsync")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-avz")]),e._v(" /var/lib/docker /home/docker/lib/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" /etc/systemd/system/docker.service.d/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" /etc/systemd/system/docker.service.d/devicemapper.conf\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ExecStart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ExecStart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/bin/dockerd  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--graph")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/home/docker/lib/docker\n\nsystemctl daemon-reload\nsystemctl restart "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\nsystemctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" info\n")])])]),s("blockquote",[s("p",[e._v("显示  Docker Root Dir: /home/docker/lib/docker 确定容器没问题后删除/var/lib/docker/目录中的文件")])]),e._v(" "),s("h2",{attrs:{id:"linux使用lrzsz工具上传下载文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux使用lrzsz工具上传下载文件"}},[e._v("#")]),e._v(" linux使用lrzsz工具上传下载文件")]),e._v(" "),s("ul",[s("li",[e._v("安装lrzsz")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" yum "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" lrzsz\n")])])]),s("ul",[s("li",[e._v("rz - 上传文件")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 键入rz命令, 然后回车，服务器接收文件的目录下有同名的文件, 将跳过上传过程")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# 上传时用rz -be, 并且不要勾选弹出的对话框中"Upload files as ASCII"前选框.')]),e._v("\n-b: 用binary的方式上传下载, 不解释字符为ASCII.\n-e: 强制escape所有控制字符, 比如Ctrl+x, DEL等.\n")])])]),s("ul",[s("li",[e._v("sz - 下载文件")])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 键入sz download_files命令, 然后回车")]),e._v("\nsz filename "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载一个文件")]),e._v("\nsz filename1 filename2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载多个文件")]),e._v("\nsz dir/* "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载dir目录下的所有文件, 不包含dir下的文件夹")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 修改SecureCRT默认的上传/下载目录:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 选择菜单栏的[Options(选项)] --\x3e [Session Options(会话选项)] --\x3e [X/Y/Zmodem], 然后修改Upload/Download路径即可.")]),e._v("\n")])])]),s("h2",{attrs:{id:"curl发送请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#curl发送请求"}},[e._v("#")]),e._v(" curl发送请求")]),e._v(" "),s("h3",{attrs:{id:"get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[e._v("#")]),e._v(" GET")]),e._v(" "),s("p",[e._v('curl -G -k "https://188.104.78.170:9190/rjgf/api/cmp/cmp-manage/open/rest/test/setOrderTime" --data-urlencode "id=e2b75ec4f17043cf9f7ce7b8e316ffef" --data-urlencode "startTime=2024-01-14 09:00:00" --data-urlencode "endTime=2024-01-14 10:00:00"')])])}),[],!1,null,null,null);s.default=r.exports}}]);